use lexgen::lexer;
use Vb6TokenKind::*;
use strum::{EnumCount, FromRepr};

/*
 * Visual Basic 6 grammar is exhaustively documented here,
 * https://learn.microsoft.com/en-us/dotnet/visual-basic/reference/language-specification/lexical-grammar
 * but since we only care about lexing, we're using this spec as a base.
 * https://github.com/antlr/grammars-v4/blob/master/vb6/VisualBasic6Lexer.g4
 */

lexer! {
    pub Vb6Lexer -> Vb6TokenKind;

    let letter = ['A'-'Z' 'a'-'z' '_' 'Ä' 'Ö' 'Ü' 'Á' 'É' 'Í' 'Ó' 'Ú' 'Â' 'Ê' 'Î' 'Ô' 'Û' 'À' 'È' 'Ì' 'Ò' 'Ù' 'Ã' 'Ẽ' 'Ĩ' 'Õ' 'Ũ' 'Ç'];
    let letter_or_digit = $letter | $$ascii_digit;
    let whitespace = [' ' '\t']+;
    let line_continuation = ' ' '_' '\r'? '\n';
    let not_newline = _ # ['\r' '\n'];

    rule Init {
        // literals
        '"' ((_ # ['"' '\r' '\n']) | "\"\"")* '"' = LiteralString,
        '#' (_ # ['#' '\r' '\n'])* '#' = LiteralDate,
        "&h" $$ascii_hexdigit+ '&'? = LiteralColor,
        // technically the exponent in this rule needs to be recursive but in 99% of cases its fine
        $$ascii_digit+ ('e' $$ascii_digit+)* ['#' '&' '!' '@']? = LiteralInteger,
        $$ascii_digit* '.' $$ascii_digit+ ('e' ['+' '-']? $$ascii_digit+)* ['#' '&' '!' '@']? = LiteralDouble,
        '#' $letter_or_digit+ = LiteralFileNumber,
        '&' ['O' 'o']  ['0'-'7']+ '&'? = LiteralOctal,
        ':' $$ascii_hexdigit+ = LiteralFrxOffset,
        '{' $$ascii_hexdigit+ '-' $$ascii_hexdigit+ '-' $$ascii_hexdigit+ '-' $$ascii_hexdigit+ '-' $$ascii_hexdigit+ '}' = LiteralGuid,

        // keywords
        "access" = KeywordAccess,
        "addressof" = KeywordAddressOf,
        "alias" = KeywordAlias,
        "and" = KeywordAnd,
        "attribute" = KeywordAttribute,
        "appactivate" = KeywordAppActivate,
        "append" = KeywordAppend,
        "as" = KeywordAs,
        "beep" = KeywordBeep,
        "begin" = KeywordBegin,
        "beginproperty" = KeywordBeginProperty,
        "binary" = KeywordBinary,
        "boolean" = KeywordBoolean,
        "byval" = KeywordByVal,
        "byref" = KeywordByRef,
        "byte" = KeywordByte,
        "call" = KeywordCall,
        "case" = KeywordCase,
        "chdir" = KeywordChdir,
        "chdrive" = KeywordChdrive,
        "class" = KeywordClass,
        "close" = KeywordClose,
        "collection" = KeywordCollection,
        "const" = KeywordConst,
        "date" = KeywordDate,
        "declare" = KeywordDeclare,
        "defbool" = KeywordDefBool,
        "defbyte" = KeywordDefByte,
        "defdate" = KeywordDefDate,
        "defdbl" = KeywordDefDbl,
        "defdec" = KeywordDefDec,
        "defcur" = KeywordDefCur,
        "defint" = KeywordDefInt,
        "deflng" = KeywordDefLng,
        "defobj" = KeywordDefObj,
        "defsng" = KeywordDefSng,
        "defstr" = KeywordDefStr,
        "defvar" = KeywordDefVar,
        "deletesetting" = KeywordDeleteSetting,
        "dim" = KeywordDim,
        "do" = KeywordDo,
        "double" = KeywordDouble,
        "each" = KeywordEach,
        "else" = KeywordElse,
        "elseif" = KeywordElseIf,
        "endenum" = KeywordEndEnum,
        "endfunction" = KeywordEndFunction,
        "endif" = KeywordEndIf,
        "endproperty" = KeywordEndProperty,
        "endselect" = KeywordEndSelect,
        "endsub" = KeywordEndSub,
        "endtype" = KeywordEndType,
        "endwith" = KeywordEndWith,
        "end" = KeywordEnd,
        "enum" = KeywordEnum,
        "eqv" = KeywordEqv,
        "erase" = KeywordErase,
        "error" = KeywordError,
        "event" = KeywordEvent,
        "exitdo" = KeywordExitDo,
        "exitfor" = KeywordExitFor,
        "exitfunction" = KeywordExitFunction,
        "exitproperty" = KeywordExitProperty,
        "exitsub" = KeywordExitSub,
        "false" = KeywordFalse,
        "filecopy" = KeywordFileCopy,
        "friend" = KeywordFriend,
        "for" = KeywordFor,
        "function" = KeywordFunction,
        "get" = KeywordGet,
        "global" = KeywordGlobal,
        "gosub" = KeywordGoSub,
        "goto" = KeywordGoto,
        "if" = KeywordIf,
        "imp" = KeywordImp,
        "implements" = KeywordImplements,
        "in" = KeywordIn,
        "input" = KeywordInput,
        "is" = KeywordIs,
        "integer" = KeywordInteger,
        "kill" = KeywordKill,
        "load" = KeywordLoad,
        "lock" = KeywordLock,
        "long" = KeywordLong,
        "loop" = KeywordLoop,
        "len" = KeywordLen,
        "let" = KeywordLet,
        "lib" = KeywordLib,
        "like" = KeywordLike,
        "lineinput" = KeywordLineInput,
        "lockread" = KeywordLockRead,
        "lockwrite" = KeywordLockWrite,
        "lockreadwrite" = KeywordLockReadWrite,
        "lset" = KeywordLSet,
        "me" = KeywordMe,
        "mid" = KeywordMid,
        "mkdir" = KeywordMkdir,
        "mod" = KeywordMod,
        "name" = KeywordName,
        "next" = KeywordNext,
        "new" = KeywordNew,
        "not" = KeywordNot,
        "nothing" = KeywordNothing,
        "null" = KeywordNull,
        "object" = KeywordObject,
        "on" = KeywordOn,
        "onerror" = KeywordOnError,
        "onlocalerror" = KeywordOnLocalError,
        "open" = KeywordOpen,
        "optional" = KeywordOptional,
        "optionbase" = KeywordOptionBase,
        "optionexplicit" = KeywordOptionExplicit,
        "optioncompare" = KeywordOptionCompare,
        "optionprivatemodule" = KeywordOptionPrivateModule,
        "or" = KeywordOr,
        "output" = KeywordOutput,
        "paramarray" = KeywordParamArray,
        "preserve" = KeywordPreserve,
        "print" = KeywordPrint,
        "private" = KeywordPrivate,
        "propertyget" = KeywordPropertyGet,
        "propertylet" = KeywordPropertyLet,
        "propertyset" = KeywordPropertySet,
        "public" = KeywordPublic,
        "put" = KeywordPut,
        "random" = KeywordRandom,
        "randomize" = KeywordRandomize,
        "raiseevent" = KeywordRaiseEvent,
        "read" = KeywordRead,
        "readwrite" = KeywordReadWrite,
        "redim" = KeywordRedim,
        "rem" = KeywordRem,
        "reset" = KeywordReset,
        "resume" = KeywordResume,
        "return" = KeywordReturn,
        "rmdir" = KeywordRmdir,
        "rset" = KeywordRSet,
        "savepicture" = KeywordSavePicture,
        "savesetting" = KeywordSaveSetting,
        "seek" = KeywordSeek,
        "select" = KeywordSelect,
        "sendkeys" = KeywordSendKeys,
        "set" = KeywordSet,
        "setattr" = KeywordSetAttr,
        "shared" = KeywordShared,
        "single" = KeywordSingle,
        "spc" = KeywordSpc,
        "static" = KeywordStatic,
        "step" = KeywordStep,
        "stop" = KeywordStop,
        "string" = KeywordString,
        "sub" = KeywordSub,
        "tab" = KeywordTab,
        "text" = KeywordText,
        "then" = KeywordThen,
        "time" = KeywordTime,
        "to" = KeywordTo,
        "true" = KeywordTrue,
        "type" = KeywordType,
        "typeof" = KeywordTypeOf,
        "unload" = KeywordUnload,
        "unlock" = KeywordUnlock,
        "until" = KeywordUntil,
        "variant" = KeywordVariant,
        "version" = KeywordVersion,
        "wend" = KeywordWend,
        "while" = KeywordWhile,
        "width" = KeywordWidth,
        "with" = KeywordWith,
        "withevents" = KeywordWithEvents,
        "write" = KeywordWrite,
        "xor" = KeywordXor,

        // identifiers
        $letter $letter_or_digit* = Identifier,

        // macros
        // technically these can be case insensitive too but we'll deal with it if it becomes a problem
        "#If" = MacroIf,
        "#ElseIf" = MacroElseIf,
        "#Else" = MacroElse,
        "#End If" = MacroEndIf,

        // symbols
        "&" = SymbolAmpersand,
        ":=" = SymbolAssign,
        "@" = SymbolAt,
        ":" = SymbolColon,
        "," = SymbolComma,
        "\\" = SymbolIDiv,
        "/" = SymbolDiv,
        "$" = SymbolDollar,
        "." = SymbolDot,
        "=" = SymbolEq,
        "!" = SymbolExclamation,
        ">=" = SymbolGeq,
        ">" = SymbolGt,
        "#" = SymbolHash,
        "<=" = SymbolLeq,
        "{" = SymbolLBrace,
        "(" = SymbolLParen,
        "<" = SymbolLt,
        "-" = SymbolMinus,
        "-=" = SymbolMinusEq,
        "*" = SymbolMult,
        "<>" = SymbolNeq,
        "%" = SymbolPercent,
        "+" = SymbolPlus,
        "+=" = SymbolPlusEquals,
        "^" = SymbolPow,
        "}" = SymbolRBrace,
        ")" = SymbolRParen,
        ";" = SymbolSemicolon,
        "[" = SymbolLSquareBracket,
        "]" = SymbolRSquareBracket,

        // whitespace, line breaks, comments
        // technically whitespace DOES have meaning in VB but we're ignoring that
        $whitespace,
        $line_continuation = LineContinuation,
        $whitespace? ('\r'? '\n' | ": ") $whitespace? = NewLine,
        $whitespace? ("'" | ":"? "REM " ) ($line_continuation | (_ # ['\r' '\n']))* = Comment,
    }
}

#[derive(Debug, EnumCount, FromRepr)]
pub enum Vb6TokenKind {
    KeywordAccess,
    KeywordAddressOf,
    KeywordAlias,
    KeywordAnd,
    KeywordAttribute,
    KeywordAppActivate,
    KeywordAppend,
    KeywordAs,
    KeywordBeep,
    KeywordBegin,
    KeywordBeginProperty,
    KeywordBinary,
    KeywordBoolean,
    KeywordByVal,
    KeywordByRef,
    KeywordByte,
    KeywordCall,
    KeywordCase,
    KeywordChdir,
    KeywordChdrive,
    KeywordClass,
    KeywordClose,
    KeywordCollection,
    KeywordConst,
    KeywordDate,
    KeywordDeclare,
    KeywordDefBool,
    KeywordDefByte,
    KeywordDefDate,
    KeywordDefDbl,
    KeywordDefDec,
    KeywordDefCur,
    KeywordDefInt,
    KeywordDefLng,
    KeywordDefObj,
    KeywordDefSng,
    KeywordDefStr,
    KeywordDefVar,
    KeywordDeleteSetting,
    KeywordDim,
    KeywordDo,
    KeywordDouble,
    KeywordEach,
    KeywordElse,
    KeywordElseIf,
    KeywordEndEnum,
    KeywordEndFunction,
    KeywordEndIf,
    KeywordEndProperty,
    KeywordEndSelect,
    KeywordEndSub,
    KeywordEndType,
    KeywordEndWith,
    KeywordEnd,
    KeywordEnum,
    KeywordEqv,
    KeywordErase,
    KeywordError,
    KeywordEvent,
    KeywordExitDo,
    KeywordExitFor,
    KeywordExitFunction,
    KeywordExitProperty,
    KeywordExitSub,
    KeywordFalse,
    KeywordFileCopy,
    KeywordFriend,
    KeywordFor,
    KeywordFunction,
    KeywordGet,
    KeywordGlobal,
    KeywordGoSub,
    KeywordGoto,
    KeywordIf,
    KeywordImp,
    KeywordImplements,
    KeywordIn,
    KeywordInput,
    KeywordIs,
    KeywordInteger,
    KeywordKill,
    KeywordLoad,
    KeywordLock,
    KeywordLong,
    KeywordLoop,
    KeywordLen,
    KeywordLet,
    KeywordLib,
    KeywordLike,
    KeywordLineInput,
    KeywordLockRead,
    KeywordLockWrite,
    KeywordLockReadWrite,
    KeywordLSet,
    KeywordMe,
    KeywordMid,
    KeywordMkdir,
    KeywordMod,
    KeywordName,
    KeywordNext,
    KeywordNew,
    KeywordNot,
    KeywordNothing,
    KeywordNull,
    KeywordObject,
    KeywordOn,
    KeywordOnError,
    KeywordOnLocalError,
    KeywordOpen,
    KeywordOptional,
    KeywordOptionBase,
    KeywordOptionExplicit,
    KeywordOptionCompare,
    KeywordOptionPrivateModule,
    KeywordOr,
    KeywordOutput,
    KeywordParamArray,
    KeywordPreserve,
    KeywordPrint,
    KeywordPrivate,
    KeywordPropertyGet,
    KeywordPropertyLet,
    KeywordPropertySet,
    KeywordPublic,
    KeywordPut,
    KeywordRandom,
    KeywordRandomize,
    KeywordRaiseEvent,
    KeywordRead,
    KeywordReadWrite,
    KeywordRedim,
    KeywordRem,
    KeywordReset,
    KeywordResume,
    KeywordReturn,
    KeywordRmdir,
    KeywordRSet,
    KeywordSavePicture,
    KeywordSaveSetting,
    KeywordSeek,
    KeywordSelect,
    KeywordSendKeys,
    KeywordSet,
    KeywordSetAttr,
    KeywordShared,
    KeywordSingle,
    KeywordSpc,
    KeywordStatic,
    KeywordStep,
    KeywordStop,
    KeywordString,
    KeywordSub,
    KeywordTab,
    KeywordText,
    KeywordThen,
    KeywordTime,
    KeywordTo,
    KeywordTrue,
    KeywordType,
    KeywordTypeOf,
    KeywordUnload,
    KeywordUnlock,
    KeywordUntil,
    KeywordVariant,
    KeywordVersion,
    KeywordWend,
    KeywordWhile,
    KeywordWidth,
    KeywordWith,
    KeywordWithEvents,
    KeywordWrite,
    KeywordXor,
    MacroIf,
    MacroElseIf,
    MacroElse,
    MacroEndIf,
    SymbolAmpersand,
    SymbolAssign,
    SymbolAt,
    SymbolColon,
    SymbolComma,
    SymbolIDiv,
    SymbolDiv,
    SymbolDollar,
    SymbolDot,
    SymbolEq,
    SymbolExclamation,
    SymbolGeq,
    SymbolGt,
    SymbolHash,
    SymbolLeq,
    SymbolLBrace,
    SymbolLParen,
    SymbolLt,
    SymbolMinus,
    SymbolMinusEq,
    SymbolMult,
    SymbolNeq,
    SymbolPercent,
    SymbolPlus,
    SymbolPlusEquals,
    SymbolPow,
    SymbolRBrace,
    SymbolRParen,
    SymbolSemicolon,
    SymbolLSquareBracket,
    SymbolRSquareBracket,
    LiteralString,
    LiteralDate,
    LiteralColor,
    LiteralInteger,
    LiteralDouble,
    LiteralOctal,
    LiteralFileNumber,
    LiteralFrxOffset,
    LiteralGuid,
    Identifier,
    LineContinuation,
    WhiteSpace,
    NewLine,
    Comment
}

impl From<Vb6TokenKind> for usize {
    fn from(token: Vb6TokenKind) -> Self {
        token as usize
    }
}